<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Security.Cryptography.X509Certificates" #>
<#
fileManager.StartHeader();
// Copyright (C) Simon Hughes 2012
// v2.18.1
#>
// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = <#=TargetFrameworkVersion #>
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

namespace <#= Namespace #>
{
<#
var usingsContext = new List<string>();
var usingsAll = new List<string>();

usingsAll.AddRange(AdditionalNamespaces.Where(x => !string.IsNullOrEmpty(x)));

if ((ElementsToGenerate.HasFlag(Elements.PocoConfiguration) ||
     ElementsToGenerate.HasFlag(Elements.Context) ||
     ElementsToGenerate.HasFlag(Elements.UnitOfWork)) &&
    (!ElementsToGenerate.HasFlag(Elements.Poco) && !string.IsNullOrWhiteSpace(PocoNamespace)))
    usingsAll.Add(PocoNamespace);

if (ElementsToGenerate.HasFlag(Elements.PocoConfiguration) &&
    (!ElementsToGenerate.HasFlag(Elements.Context) && !string.IsNullOrWhiteSpace(ContextNamespace)))
    usingsAll.Add(ContextNamespace);

if (ElementsToGenerate.HasFlag(Elements.Context) &&
    (!ElementsToGenerate.HasFlag(Elements.UnitOfWork) && !string.IsNullOrWhiteSpace(UnitOfWorkNamespace)))
    usingsAll.Add(UnitOfWorkNamespace);

if (ElementsToGenerate.HasFlag(Elements.Context) && 
    (!ElementsToGenerate.HasFlag(Elements.PocoConfiguration) && !string.IsNullOrWhiteSpace(PocoConfigurationNamespace)))
        usingsAll.Add(PocoConfigurationNamespace);

if (ElementsToGenerate.HasFlag(Elements.Context))
{
    if (AddUnitTestingDbContext || storedProcs.Any())
    {
        usingsContext.Add("System.Linq");
    }
}
if (!GenerateSeparateFiles)
{
    usingsAll.AddRange(usingsContext);
}
foreach(var usingStatement in usingsAll.Distinct().OrderBy(x => x)) { #>
    using <#= usingStatement #>;
<# } #>
<#
    if (ElementsToGenerate.HasFlag(Elements.Manager))
    {
        #>

		// ************************************************************************
		// CentralCodesManager
		// ************************************************************************

		public class CentralCodesManager : FCSAmerica.CentralCodes.ICodesManager
		{
			private readonly string _baseUri;
			private readonly FCSAmerica.CentralCodes.CentralCodesServiceAgent _svc;

			public CentralCodesManager(string baseUri)
			{
				_baseUri = baseUri;
				_svc =  new FCSAmerica.CentralCodes.CentralCodesServiceAgent(_baseUri);
			}

			public List<T> GetActiveList<T>() where T : CentralCodesEntity
			{
				return _svc.GetActiveList<T>();
			}

			public T GetByEnum<T>(int enumValue) where T : CentralCodesEntity
			{
				return _svc.GetByEnum<T>(enumValue);
			}

			public T GetById<T>(int id) where T : CentralCodesEntity
			{
				return _svc.GetById<T>(id);
			}

			public T GetByNameLong<T>(string nameLong) where T : CentralCodesEntity
			{
				return _svc.GetByNameLong<T>(nameLong);
			}

			public T GetByNameMicro<T>(string nameMicro) where T : CentralCodesEntity
			{
				return _svc.GetByNameMicro<T>(nameMicro);
			}

			public T GetByNameShort<T>(string nameShort) where T : CentralCodesEntity
			{
				return _svc.GetByNameShort<T>(nameShort);
			}

			public TEnum? GetEnumById<T, TEnum>(int id)
				where T : CentralCodesEntity
				where TEnum : struct, IComparable, IConvertible, IFormattable
			{
				return _svc.GetEnumById<T, TEnum>(id);
			}

			public int GetIdByEnum<T>(int enumValue) where T : CentralCodesEntity
			{
				return _svc.GetIdByEnum<T>(enumValue);
			}

			public List<T> GetList<T>() where T : CentralCodesEntity
			{
				return _svc.GetList<T>();
			}

			public OptionListDto GetOptions<T>() where T : CentralCodesEntity
			{
				return _svc.GetOptions<T>();
			}
		}
		<#
    }
 if(ElementsToGenerate.HasFlag(Elements.Poco)){
 if(!GenerateSeparateFiles) { #>

    // ************************************************************************
    // POCO classes

<# } #>
<#
foreach(Table tbl in from t in tables.Where(t => !t.IsMapping).OrderBy(x => x.NameHumanCase) select t)
{
#>
<# fileManager.StartNewFile(tbl.NameHumanCase + FileExtension); #>
<#if(IncludeComments){#>    // <#=tbl.Name#>
<# } #>
<# if(AddWcfDataAttributes) { #>    [System.Runtime.Serialization.DataContract<#=ExtraWcfDataContractAttributes#>]
<# } 
    WritePocoClassAttributes(tbl);#>
<#if (tbl.ReverseNavigationCtor.Any()){ #>
    <#= CodeGeneratedAttribute #>
<# } #>
    public <# if(MakeClassesPartial) { #>partial <# } #>class <#=tbl.NameHumanCase#><#=WritePocoBaseClasses != null ? WritePocoBaseClasses(tbl) : "" #>
    {
<# WritePocoBaseClassBody(tbl); #>
<# int DataMemberOrder = 1;
foreach(Column col in tbl.Columns.OrderBy(x => x.Ordinal).Where(x => !x.Hidden))
{
#>
<#if(IncludeExtendedPropertyComments == ExtendedPropertyCommentsStyle.InSummaryBlock && !string.IsNullOrEmpty(col.ExtendedProperty)){#>

        ///<summary>
        /// <#=col.ExtendedProperty#>
        ///</summary>
<# } #>
<# if(AddWcfDataAttributes) { #>        [System.Runtime.Serialization.DataMember(Order = <#=DataMemberOrder++#>, IsRequired = <#=col.IsNullable ? "false" : "true"#>)]
<# } #>
        <#= WritePocoColumn(col) #>
<# if(AddWcfDataAttributes) { #>

<# } } #>
<#
if(tbl.ReverseNavigationProperty.Count() > 0)
{
#>
<# }
if(tbl.Columns.Where(c => c.Default != string.Empty && !c.Hidden).Count() > 0 || tbl.ReverseNavigationCtor.Count() > 0 || MakeClassesPartial) 
{ 
#>        
        public <#=tbl.NameHumanCase#>()
        {
<#
foreach(Column col in tbl.Columns.OrderBy(x => x.Ordinal).Where(c => c.Default != string.Empty && !c.Hidden))
{
#>
            <#=col.NameHumanCase #> = <#=col.Default #>;
<# } #>
<#  
if(MakeClassesPartial) {#>
            InitializePartial();
<#}#>        }
<#if(MakeClassesPartial) {#>

        partial void InitializePartial();
<#} }#>
    }

<# } }
if(ElementsToGenerate.HasFlag(Elements.PocoConfiguration)){
if(!GenerateSeparateFiles) { #>

    // ************************************************************************
    // POCO Configuration

<# } #>
<#
foreach(Table tbl in tables.Where(t => !t.IsMapping).OrderBy(x => x.NameHumanCase))
{
#>
<# fileManager.StartNewFile(tbl.NameHumanCase + ConfigurationClassName + FileExtension);
if(IncludeComments){#>    // <#=tbl.Name#>
<# } #>
    public <# if(MakeClassesPartial) { #>partial <# } #>class <#=tbl.NameHumanCase + ConfigurationClassName#> : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<<#=tbl.NameHumanCase#>>
    {
        public <#=tbl.NameHumanCase + ConfigurationClassName#>()
            : this(<# if (string.IsNullOrEmpty(tbl.Schema)) { #>""<# } else { #>"<#=tbl.Schema#>"<# } #>)
        {
        }
 
        public <#=tbl.NameHumanCase + ConfigurationClassName#>(string schema)
        {
 <# if (!string.IsNullOrEmpty(tbl.Schema)) { #>
           ToTable(schema + ".<#=tbl.Name#>");
 <# } else { #>
           ToTable("<#=tbl.Name#>");
 <# } #>
           HasKey(<#=tbl.PrimaryKeyNameHumanCase()#>);

<#
foreach(Column col in tbl.Columns.Where(x => !x.Hidden).OrderBy(x => x.Ordinal))
{
#>
            <#=col.Config #>
<# } #>

<#
foreach (string s in tbl.MappingConfiguration)
{
#>
            <#=s#>
<# } #>
<#if(MakeClassesPartial) {#>
            InitializePartial();
<#}#>        }
<#if(MakeClassesPartial) {#>
        partial void InitializePartial();
<#}#>    }

<# } }
if(storedProcs.Any() && ElementsToGenerate.HasFlag(Elements.Poco)){
if(!GenerateSeparateFiles) { #>

    // ************************************************************************
    // Stored procedure return models

<# } #>
<#
foreach(StoredProcedure sp in storedProcs.Where(x => x.ReturnModels.Count > 0 && x.ReturnModels.Any(returnColumns => returnColumns.Any()) && !StoredProcedureReturnTypes.ContainsKey(x.NameHumanCase) && !StoredProcedureReturnTypes.ContainsKey(x.Name)))
{
    string spReturnClassName = WriteStoredProcReturnModelName(sp);
#>
<# fileManager.StartNewFile(spReturnClassName + FileExtension);#>
<# if(AddWcfDataAttributes) { #>    [System.Runtime.Serialization.DataContract<#=ExtraWcfDataContractAttributes#>]
<# } #>
    public <# if(MakeClassesPartial) { #>partial <# } #>class <#= spReturnClassName #>
    {
<#
int DataMemberOrder = 1;
var returnModelCount = sp.ReturnModels.Count;
if(returnModelCount < 2)
{
    foreach (var returnColumn in sp.ReturnModels.First())
    { #>
<# if(AddWcfDataAttributes) { #>        [System.Runtime.Serialization.DataMember(Order = <#=DataMemberOrder++#>, IsRequired = <#=StoredProcedure.IsNullable(returnColumn) ? "false" : "true"#>)]
<# } #>
        <#= WriteStoredProcReturnColumn(returnColumn) #>
<#  }
} else {
    int model = 0;
    foreach (var returnModel in sp.ReturnModels)
    {
        int SubDataMemberOrder = 1;
        model++;#>
        public class ResultSetModel<#= model #>
        {
<#      foreach (var returnColumn in returnModel)
        { #>
<# if(AddWcfDataAttributes) { #>            [System.Runtime.Serialization.DataMember(Order = <#=SubDataMemberOrder++#>, IsRequired = <#=StoredProcedure.IsNullable(returnColumn) ? "false" : "true"#>)]
<# } #>
            <#= WriteStoredProcReturnColumn(returnColumn) #>
<#      }#>
        }
<# if(AddWcfDataAttributes) { #>        [System.Runtime.Serialization.DataMember(Order = <#=DataMemberOrder++#>, IsRequired = true)]
<# } #>
        public System.Collections.Generic.List<ResultSetModel<#= model #>> ResultSet<#= model #>;

<#  } #>
<# } #>
    }

<# } } #>
<#
if (ElementsToGenerate.HasFlag(Elements.EnumGeneration))
{    
	var enumFilterIncludeSetting = GetAppSetting("CentralCodesDynamicEnumFilterInclude");
    Regex enumFilterInclude = null;
    if (!string.IsNullOrEmpty(enumFilterIncludeSetting))
    {
        enumFilterInclude = new Regex(enumFilterIncludeSetting);
    }

foreach(Table tbl in tables.Where(t => !t.IsMapping && (t.Schema == "CodesStatic" || (t.Schema == "CodesDynamic" && enumFilterInclude != null && enumFilterInclude.IsMatch(t.Name) == true))).OrderBy(x => x.NameHumanCase))
{
	var codeItemFactory = new CodeItemFactory();
    var assocNames = GetAppSetting("CentralCodesAssociationNames");
    var enumFilterExcludeSetting = GetAppSetting("CentralCodesEnumFilterExclude");
	Regex enumFilterExclude = null;
    if (!string.IsNullOrEmpty(enumFilterExcludeSetting))
    {
        enumFilterExclude = new Regex(enumFilterExcludeSetting);
    }

	var codeItems = codeItemFactory.GetCodeItems(factory, tbl, EnumActiveColumnNames, assocNames, ConnectionString, enumFilterExclude);

	if (codeItems.Count > 0)
	{
#>
<# fileManager.StartNewFile(tbl.Name + FileExtension);#>
}
namespace <#=EnumNamespace#>
{
	public enum <#=tbl.Name#>
	{
	<#foreach(var codeItem in codeItems){#>
	<#=codeItem.GetT4TemplateCodeItemText() #>,
	<#}#>}
<# }
}

} #>
<# fileManager.StartFooter(); #>
}
// </auto-generated>
<# fileManager.EndBlock();
if(GenerateSeparateFiles)
    fileManager.Process(); #>
