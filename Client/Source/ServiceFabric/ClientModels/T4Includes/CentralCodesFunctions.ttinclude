<#@ import namespace="System.Runtime.CompilerServices" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#+
	public string IsApplicationSpecificActiveColumns { get; set; }
	public string IsApplicationActiveColumnName { get; set; }	
	//public string AssociationNames { get; set; }
	//public string ApplicationName { get; set; }
	public string EnumActiveColumnNames { get; set; }
	public bool IsXref { get; set; }
	public string PartialModelCreatingMethodName { get; set; }
	//public Regex CodesDynamicEnumFilterInclude { get; set;}

	public static string WriteFcsaPocoColumn(Column column)
	{
		var entity = column.Entity;

		if (column.IsPrimaryKey) 
		{
			entity = string.Format("public override int Id {2} return {0}; {3}\n        {1}", column.NameHumanCase, entity, "{ get {", "} }" );
		}

		if (column.NameHumanCase == "NameMicro" || column.NameHumanCase == "NameShort" || column.NameHumanCase == "NameLong")
		{
			entity = string.Format("public override string {0} {1}", column.NameHumanCase, "{ get; set; }");
		}

		if (column.NameHumanCase == "EnumValue" || column.NameHumanCase == "SortOrder")
		{
			entity = string.Format("public override int? {0} {1}", column.NameHumanCase, "{ get; set; }");
		}

		if (column.NameHumanCase == "CodeStatus")
		{
			entity = string.Format("public override int? {0} {1}", column.NameHumanCase, "{ get; set; }");
		}

		return entity;		
	}

    public static string WriteFcsaCentralCodesXrefColumn(Column column)
    {
        var entity = column.Entity;

		if (column.NameHumanCase == "EnumValue" || column.NameHumanCase == "SortOrder")
		{
			entity = string.Format("public override int {0} {1}", column.NameHumanCase, "{ get; set; }");
		}

        return entity;
    }

    public static string WriteCentralCodeXrefBaseClass(Table table)
    {
        var stringBuilder = new System.Text.StringBuilder();
		
		stringBuilder.Append(WriteCheckForMissingColumns(table, "EnumValue", "int"));

		return stringBuilder.ToString();
    }

	public static string WriteCentralCodesBaseClass(Table table, string isApplicationSpecificActiveColumns, string isApplicationActiveColumnName) 
	{
		var stringBuilder = new System.Text.StringBuilder();

		stringBuilder.Append(WriteCheckForMissingColumns(table, "CodeStatus", "int?"));
		stringBuilder.Append(WriteCheckForMissingColumns(table, "EnumValue", "int?"));
		stringBuilder.Append(WriteCheckForMissingColumns(table, "SortOrder", "int?"));
		stringBuilder.Append(WriteCheckForMissingColumns(table, "NameMicro", "string"));
		stringBuilder.Append(WriteCheckForMissingColumns(table, "NameShort", "string"));
		stringBuilder.Append(WriteCheckForMissingColumns(table, "NameLong", "string"));
		stringBuilder.Append(GetIsApplicationActive(table, isApplicationSpecificActiveColumns, isApplicationActiveColumnName));

		return stringBuilder.ToString();
	}

	public static string WriteCheckForMissingColumns(Table table, string columnName, string columnType)
	{
		if (table.Columns.Any(x => x.NameHumanCase.Equals(columnName, StringComparison.OrdinalIgnoreCase)) == false)
		{
			return string.Format(@"
        [System.ComponentModel.DataAnnotations.Schema.NotMapped]
        public override {0} {1}
        {2}
		   get {3}
		   set {3}
        {4}", columnType, columnName, "{", "{ throw new NotImplementedException(); }", "}");			
		}

		return string.Empty;
	}

	public static string GetIsApplicationActive(Table table, string isApplicationSpecificActiveColumns, string isApplicationActiveColumnName)
	{
		if (string.IsNullOrWhiteSpace(isApplicationSpecificActiveColumns))
		{
			return "        public override bool " + isApplicationActiveColumnName + " { get { return true; } }";
		}

		var columnList = isApplicationSpecificActiveColumns.Split(',').ToList();

		var columFound = table.Columns.FirstOrDefault(x => columnList.Any(y => x.NameHumanCase.Equals(y, StringComparison.OrdinalIgnoreCase)));

		if (columFound == null)
		{
			return "        public override bool " + isApplicationActiveColumnName + " { get { return true; } }";
		}

		//First check for bool, which it should be
		if (columFound.PropertyType == "bool")
		{
			return "        public override bool " + isApplicationActiveColumnName + " { get { return " + columFound.NameHumanCase + " == true; } }";
		}

		//Otherwise assume it is a int or tiny int.  If it is not either then what the hell damn guy?
		return "        public override bool " + isApplicationActiveColumnName + " { get { return " + columFound.NameHumanCase + " == 1; } }";;
	}

	public class CodeItemFactory
	{
		public List<CodeItem> GetCodeItems(DbProviderFactory factory, Table table, string enumActiveColumnNames, string associationNames, string connectionString, Regex enumFilterExclude)
		{		
			var codeItems = new List<CodeItem>();
							
			using(DbConnection conn = factory.CreateConnection())
            {
				var tableNames = new List<string>();
                conn.ConnectionString = connectionString;
                conn.Open();

				using (var command = new SqlCommand(GetTableQuery(table, associationNames), (SqlConnection)conn))
				{
					using (var reader = command.ExecuteReader())
					{
						while(reader.Read())
						{
						    var tableName = reader["name"].ToString();
						    if (enumFilterExclude == null || enumFilterExclude.IsMatch(tableName) == false)
						    {
						        tableNames.Add(tableName);
						    }
						}
					}
				}

				if (tableNames.Count == 0)
				{
					return codeItems;	
				}

				using (var command = new SqlCommand(GetEnumValueQuery(table, tableNames, enumActiveColumnNames), (SqlConnection)conn))
				{
					using (var reader = command.ExecuteReader())
					{
						while(reader.Read())
						{														
							codeItems.Add(new CodeItem{
								NameShort = reader["NameShort"].ToString(),
								NameLong = reader["NameLong"].ToString(),
								NameMicro = reader["NameMicro"].ToString(),
								EnumText = reader["EnumText"].ToString(),
								EnumValue = int.Parse(reader["EnumValue"].ToString())
							});
						}
					}
				}
			}

			return codeItems;
		}

		private string GetListOfTables(Table table, string associationNames)
		{
			if (string.IsNullOrWhiteSpace(associationNames))
			{
				return string.Format("'{0}'", table.Name);
			}

			var associations = associationNames.Split(',');

			return string.Format("{0}, '{1}'", string.Join(",", associations.Select(x => "'" + table.Name + "_" + x + "'").ToArray()), table.Name);
		}

		private string GetTableQuery(Table table, string associationNames)
		{
			var tableList = GetListOfTables(table, associationNames);

			return string.Format("SELECT name FROM sys.tables WHERE name IN ({0}) order by name", tableList);
		}

		private string GetEnumValueQuery(Table table, List<string> tableNames, string enumActiveColumnNames)
		{
			var tableQueries = new List<string>();

			foreach(var name in tableNames)
			{
				tableQueries.Add(GetTableDataQuery(table, name, enumActiveColumnNames));
			}

			var query = "With EnumData as (";

			bool addedTable = false;
			foreach (var tableQuery in tableQueries)
			{
				if (addedTable)
				{
					query += @"
					Union ALL ";
				}

				query += @"
				" + tableQuery;

				addedTable = true;
			}

			return query + @") 
			select Max(NameMicro) as NameMicro, Max(NameShort) as NameShort, Max(NameLong) as NameLong, Max(EnumText) as EnumText, EnumValue from EnumData group by EnumValue";
		}

		private string GetTableDataQuery(Table table, string name, string enumActiveColumnNames)
		{
			var initialQuery = string.Format("SELECT EnumValue, NameMicro, NameShort, NameLong, EnumText FROM {0}.{1} WHERE CodeStatus = 1 AND EnumValue IS NOT null and isnull(REPLACE(EnumText,' ',''), '') not like 'EnumText-%'", table.Schema, name);
			
			if (string.IsNullOrWhiteSpace(enumActiveColumnNames))
			{
				return initialQuery;
			}

			var activeColumnNames = enumActiveColumnNames.Split(',');
			foreach (var columnName in activeColumnNames)
			{
				if (table.Columns.Any(x => x.Name == columnName))
				{
					initialQuery += string.Format(" And {0} = 1", columnName);
				}
			}

			return initialQuery;
		}
	}
	
	public class CodeItem
	{
		public int EnumValue { get; set; }
		public string NameMicro { get; set; }
		public string NameShort { get; set; }
		public string NameLong { get; set; }
		public string EnumText { get; set; }

		public string CodeItemText
		{
			get 
			{
				if (!string.IsNullOrWhiteSpace(EnumText) && !Regex.IsMatch(EnumText, @"^\d+$"))
				{
					return EnumText.Replace(" ", "");
				}

				if (!string.IsNullOrWhiteSpace(NameShort))
				{
					return Pascalize(NameShort);
				}

				if (!string.IsNullOrWhiteSpace(NameMicro) && !Regex.IsMatch(NameMicro, @"^\d+$"))
				{
					return Pascalize(NameMicro);
				}

				if (!string.IsNullOrWhiteSpace(NameLong))
				{
					return Pascalize(NameLong);
				}

				return string.Empty;
			}
		}

		public string GetEnumTextFormatted()
		{
			return CodeItemText;
		}

		public string GetT4TemplateCodeItemText()
		{
			return string.Format("{0} = {1}", GetEnumTextFormatted(), EnumValue);
		}

		private string Pascalize(object value)
		{
			Regex rx = new Regex(@"(?:[^a-zA-Z0-9]*)(?<first>[a-zA-Z0-9])(?<reminder>[a-zA-Z0-9]*)(?:[^a-zA-Z0-9]*)");
			return rx.Replace(value.ToString(), m => m.Groups["first"].ToString().ToUpper() + m.Groups["reminder"].ToString().ToLower());
		}
	}	
#>