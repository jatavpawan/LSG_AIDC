{"version":3,"sources":["../src/app/dp-calendar/config/calendar.service.ts"],"names":[],"mappings":"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","file":"app/dp-calendar/config/calendar.service.js","sourcesContent":["import {UtilsService} from '../../common/services/utils/utils.service';\nimport {ICalendarMonthConfig} from '../../dp-calendar-month/config/calendar-month-config.model';\nimport {ICalendarConfig} from './calendar-config.model';\nimport {Injectable} from '@angular/core';\nimport * as moment from 'moment';\nimport {Moment} from 'moment';\n\n@Injectable()\nexport class CalendarService {\n  private defaultConfig: ICalendarConfig = {\n    firstDayOfWeek: 'su',\n    calendarsAmount: 1,\n    monthFormat: 'MMM, YYYY',\n    weekdayNames: {\n      su: 'sun',\n      mo: 'mon',\n      tu: 'tue',\n      we: 'wed',\n      th: 'thu',\n      fr: 'fri',\n      sa: 'sat'\n    },\n  };\n\n  private formatValues(config: ICalendarConfig): void {\n    const {format, min, max} = config;\n\n    if (min && typeof min === 'string') {\n      config.min = moment(min, format);\n    }\n\n    if (max && typeof max === 'string') {\n      config.max = moment(max, format);\n    }\n  }\n\n  getConfig(config: ICalendarConfig): ICalendarConfig {\n    const _config = Object.assign({}, this.defaultConfig, config);\n    this.formatValues(_config);\n\n    return _config;\n  }\n\n  generateCalendars(config: ICalendarConfig, selected: Moment[], month?: Moment): ICalendarMonthConfig[] {\n    const base = (month && month.clone()) || (selected && selected[0] && selected[0].clone()) || moment();\n    return UtilsService.createArray(config.calendarsAmount).map((n: number, i: number) => ({\n      month: base.clone().add(i, 'month'),\n      selected: selected,\n      firstDayOfWeek: config.firstDayOfWeek,\n      weekdayNames: config.weekdayNames,\n      min: <Moment>config.min,\n      max: <Moment>config.max\n    }));\n  }\n\n  isDateValid(date: string, format: string): boolean {\n    if (date === '') {\n      return true;\n    }\n    return moment(date, format, true).isValid();\n  }\n\n  moveCalendars(config: ICalendarConfig, selected: Moment[], base: Moment, months: number): ICalendarMonthConfig[] {\n    const month = base.clone().add(months, 'month');\n    return this.generateCalendars(config, selected, month);\n  }\n\n  isMinMonth(min: Moment, month): boolean {\n    return min ? month.clone().subtract(1, 'month').isBefore(min, 'month') : false;\n  }\n\n  isMaxMonth(max: Moment, month): boolean {\n    return max ? month.clone().add(1, 'month').isAfter(max, 'month') : false;\n  }\n}\n"],"sourceRoot":"/source/"}