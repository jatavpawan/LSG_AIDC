"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var utils_service_1 = require('../../common/services/utils/utils.service');
var core_1 = require('@angular/core');
var moment = require('moment');
var CalendarService = (function () {
    function CalendarService() {
        this.defaultConfig = {
            firstDayOfWeek: 'su',
            calendarsAmount: 1,
            monthFormat: 'MMM, YYYY',
            weekdayNames: {
                su: 'sun',
                mo: 'mon',
                tu: 'tue',
                we: 'wed',
                th: 'thu',
                fr: 'fri',
                sa: 'sat'
            },
        };
    }
    CalendarService.prototype.formatValues = function (config) {
        var format = config.format, min = config.min, max = config.max;
        if (min && typeof min === 'string') {
            config.min = moment(min, format);
        }
        if (max && typeof max === 'string') {
            config.max = moment(max, format);
        }
    };
    CalendarService.prototype.getConfig = function (config) {
        var _config = Object.assign({}, this.defaultConfig, config);
        this.formatValues(_config);
        return _config;
    };
    CalendarService.prototype.generateCalendars = function (config, selected, month) {
        var base = (month && month.clone()) || (selected && selected[0] && selected[0].clone()) || moment();
        return utils_service_1.UtilsService.createArray(config.calendarsAmount).map(function (n, i) { return ({
            month: base.clone().add(i, 'month'),
            selected: selected,
            firstDayOfWeek: config.firstDayOfWeek,
            weekdayNames: config.weekdayNames,
            min: config.min,
            max: config.max
        }); });
    };
    CalendarService.prototype.isDateValid = function (date, format) {
        if (date === '') {
            return true;
        }
        return moment(date, format, true).isValid();
    };
    CalendarService.prototype.moveCalendars = function (config, selected, base, months) {
        var month = base.clone().add(months, 'month');
        return this.generateCalendars(config, selected, month);
    };
    CalendarService.prototype.isMinMonth = function (min, month) {
        return min ? month.clone().subtract(1, 'month').isBefore(min, 'month') : false;
    };
    CalendarService.prototype.isMaxMonth = function (max, month) {
        return max ? month.clone().add(1, 'month').isAfter(max, 'month') : false;
    };
    CalendarService = __decorate([
        core_1.Injectable(), 
        __metadata('design:paramtypes', [])
    ], CalendarService);
    return CalendarService;
}());
exports.CalendarService = CalendarService;

//# sourceMappingURL=calendar.service.js.map
