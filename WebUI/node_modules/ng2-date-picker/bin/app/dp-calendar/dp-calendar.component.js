"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var calendar_service_1 = require('./config/calendar.service');
var core_1 = require('@angular/core');
var DpCalendarComponent = (function () {
    function DpCalendarComponent(calendarContainerService) {
        this.calendarContainerService = calendarContainerService;
        this.selectedChange = new core_1.EventEmitter();
        this.dayClick = new core_1.EventEmitter();
        this.dayContextMenu = new core_1.EventEmitter();
        this.calendarMove = new core_1.EventEmitter();
    }
    DpCalendarComponent.prototype.ngOnChanges = function (changes) {
        this.config = this.calendarContainerService.getConfig(this.config);
        this.calendars = this.calendarContainerService.generateCalendars(this.config, this.selected, this.calendars && this.calendars[0] && this.calendars[0].month);
    };
    DpCalendarComponent.prototype.daySelected = function (_a) {
        var day = _a.day, event = _a.event;
        if (!this.config.allowMultiSelect) {
            // Single selection
            this.selected = [day.date];
        }
        else if (day.selected && this.selected) {
            // Unselecting a day
            this.selected = this.selected.filter(function (val) { return !val.isSame(day.date, 'day'); });
        }
        else if (this.config.allowMultiSelect) {
            // Multi selection
            this.selected = this.selected ? this.selected.concat(day.date) : [day.date];
        }
        this.dayClick.emit({ day: day, event: event });
        this.selectedChange.emit(this.selected);
    };
    DpCalendarComponent.prototype.getMonthToDisplay = function (month) {
        if (typeof this.config.monthFormatter === 'function') {
            return this.config.monthFormatter(month);
        }
        return month.format(this.config.monthFormat);
    };
    DpCalendarComponent.prototype.moveCalendars = function (base, months) {
        this.calendars = this.calendarContainerService.moveCalendars(this.config, this.selected, base, months);
        this.calendarMove.emit(this.calendars[0].month);
    };
    DpCalendarComponent.prototype.isLeftNavDisabled = function (month) {
        return this.calendarContainerService.isMinMonth(this.config.min, month);
    };
    DpCalendarComponent.prototype.isRightNavDisabled = function (month) {
        return this.calendarContainerService.isMaxMonth(this.config.max, month);
    };
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Array)
    ], DpCalendarComponent.prototype, "selected", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object)
    ], DpCalendarComponent.prototype, "config", void 0);
    __decorate([
        core_1.Output(), 
        __metadata('design:type', core_1.EventEmitter)
    ], DpCalendarComponent.prototype, "selectedChange", void 0);
    __decorate([
        core_1.Output(), 
        __metadata('design:type', core_1.EventEmitter)
    ], DpCalendarComponent.prototype, "dayClick", void 0);
    __decorate([
        core_1.Output(), 
        __metadata('design:type', core_1.EventEmitter)
    ], DpCalendarComponent.prototype, "dayContextMenu", void 0);
    __decorate([
        core_1.Output(), 
        __metadata('design:type', core_1.EventEmitter)
    ], DpCalendarComponent.prototype, "calendarMove", void 0);
    DpCalendarComponent = __decorate([
        core_1.Component({
            selector: 'dp-calendar',
            template: "\n    <div class=\"dp-calendar-container\"\n         *ngFor=\"let calendar of calendars; let start = first; let end = last\">\n      <div class=\"dp-calendar-nav-container\">\n        <button class=\"dp-calendar-nav-left\"\n                *ngIf=\"start\"\n                [disabled]=\"isLeftNavDisabled(calendar.month)\"\n                (click)=\"moveCalendars(calendars[0].month, -1)\"> <\n        </button>\n        <span class=\"dp-calendar-month\">{{getMonthToDisplay(calendar.month)}}</span>\n        <button class=\"dp-calendar-nav-right\"\n                *ngIf=\"end\"\n                [disabled]=\"isRightNavDisabled(calendar.month)\"\n                (click)=\"moveCalendars(calendars[0].month, 1)\"> >\n        </button>\n      </div>\n      <dp-calendar-month\n          [selected]=\"selected\"\n          [config]=\"calendar\"\n          (dayContextMenu)=\"dayContextMenu.emit($event)\"\n          (dayClick)=\"daySelected($event)\">\n      </dp-calendar-month>\n    </div>\n  ",
            styles: ["\n    .dp-calendar-container {\n      display: inline-block;\n    }\n    .dp-calendar-nav-container {\n      position: relative;\n      box-sizing: border-box;\n      height: 25px;\n      border: 1px solid #000000;\n      border-bottom: none;\n    }\n    .dp-calendar-nav-left,\n    .dp-calendar-nav-right {\n      position: absolute;\n      top: 50%;\n      transform: translateY(-50%);\n      cursor: pointer;\n    }\n    .dp-calendar-nav-left {\n      left: 0;\n    }\n    .dp-calendar-nav-right {\n      right: 0;\n    }\n    .dp-calendar-month {\n      position: absolute;\n      top: 50%;\n      left: 50%;\n      transform: translate(-50%, -50%);\n    }\n    :host(.dp-material) .dp-calendar-container {\n      background: white;\n    }\n    :host(.dp-material) .dp-calendar-container:not(:first-of-type) {\n      border-left: 1px solid #B0AFAF;\n    }\n    :host(.dp-material) .dp-calendar-nav-container {\n      height: 30px;\n      border: none;\n    }\n    :host(.dp-material) .dp-calendar-nav-left,\n    :host(.dp-material) .dp-calendar-nav-right {\n      border: none;\n      background: white;\n      outline: none;\n      font-size: 16px;\n    }\n    :host(.dp-material) .dp-daypicker-input {\n      box-sizing: border-box;\n      height: 30px;\n      width: 212px;\n      font-size: 13px;\n      outline: none;\n    }\n    :host(.dp-material) >>> dp-calendar-month .dp-calendar-weekday {\n      height: 25px;\n      width: 30px;\n      line-height: 25px;\n      background: #E0E0E0;\n      border: none;\n    }\n    :host(.dp-material) >>> dp-calendar-month .dp-calendar-wrapper {\n      border: none;\n    }\n    :host(.dp-material) >>> dp-calendar-month .dp-calendar-day {\n      box-sizing: border-box;\n      height: 30px;\n      width: 30px;\n      background: white;\n      border-radius: 50%;\n      border: none;\n      outline: none;\n    }\n    :host(.dp-material) >>> dp-calendar-month .dp-calendar-day:hover {\n      background: #E0E0E0;\n    }\n    :host(.dp-material) >>> dp-calendar-month .dp-selected {\n      background: #106CC8;\n      color: white;\n    }\n    :host(.dp-material) >>> dp-calendar-month .dp-selected:hover {\n      background: #106CC8;\n    }\n    :host(.dp-material) >>> dp-calendar-month .dp-current-day {\n      border: 1px solid #106CC8;\n    }\n  "],
            providers: [calendar_service_1.CalendarService],
        }), 
        __metadata('design:paramtypes', [calendar_service_1.CalendarService])
    ], DpCalendarComponent);
    return DpCalendarComponent;
}());
exports.DpCalendarComponent = DpCalendarComponent;

//# sourceMappingURL=dp-calendar.component.js.map
