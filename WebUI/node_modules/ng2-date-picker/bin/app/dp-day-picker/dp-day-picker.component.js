"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var calendar_service_1 = require('../dp-calendar/config/calendar.service');
var core_1 = require('@angular/core');
var dp_calendar_component_1 = require('../dp-calendar/dp-calendar.component');
var moment = require('moment');
var day_picker_service_1 = require('./service/day-picker.service');
var forms_1 = require('@angular/forms');
var utils_service_1 = require('../common/services/utils/utils.service');
var dom_appender_service_1 = require('../common/services/dom-appender/dom-appender.service');
var DpDayPickerComponent = (function () {
    function DpDayPickerComponent(dayPickerService, domHelper, elemRef, renderer) {
        this.dayPickerService = dayPickerService;
        this.domHelper = domHelper;
        this.elemRef = elemRef;
        this.renderer = renderer;
        this.shouldNgInit = true;
        // attributes
        this.placeholder = '';
        this.disabled = false;
        this._areCalendarsShown = false;
        this.hideStateHelper = false;
        this._value = [];
        this.handleInnerElementClickUnlisteners = [];
        this.api = {};
    }
    Object.defineProperty(DpDayPickerComponent.prototype, "value", {
        get: function () {
            return this._value;
        },
        set: function (value) {
            var _this = this;
            this._value = value;
            this.viewValue = this._value ? this._value.map(function (val) { return val.format(_this.pickerConfig.format); }).join(', ') : '';
            this.onChangeCallback(this.processOnChangeCallback(value));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DpDayPickerComponent.prototype, "areCalendarsShown", {
        get: function () {
            return this._areCalendarsShown;
        },
        set: function (value) {
            if (value) {
                this.domHelper.appendElementToPosition({
                    container: this.appendToElement,
                    element: this.calendarWrapper,
                    anchor: this.inputElement,
                    dimElem: this.popupElem,
                    drops: this.pickerConfig.drops,
                    opens: this.pickerConfig.opens
                });
            }
            this._areCalendarsShown = value;
        },
        enumerable: true,
        configurable: true
    });
    DpDayPickerComponent.prototype.onClick = function () {
        this.hideStateHelper = true;
    };
    DpDayPickerComponent.prototype.onBodyClick = function () {
        if (!this.hideStateHelper) {
            this.hideCalendar();
        }
        this.hideStateHelper = false;
    };
    DpDayPickerComponent.prototype.onScroll = function () {
        if (this.areCalendarsShown) {
            this.domHelper.setElementPosition({
                container: this.appendToElement,
                element: this.calendarWrapper,
                anchor: this.inputElement,
                dimElem: this.popupElem,
                drops: this.pickerConfig.drops,
                opens: this.pickerConfig.opens
            });
        }
    };
    DpDayPickerComponent.prototype.ngOnInit = function () {
        if (this.shouldNgInit) {
            this.init();
        }
    };
    DpDayPickerComponent.prototype.ngOnChanges = function (changes) {
        this.shouldNgInit = false;
        var minDate = changes.minDate, maxDate = changes.maxDate;
        this.init();
        if (minDate || maxDate) {
            this.initValidators();
        }
    };
    DpDayPickerComponent.prototype.ngAfterViewInit = function () {
        this.calendarWrapper = this.calendarContainer.nativeElement;
        this.inputElement = this.elemRef.nativeElement.querySelector('input');
        this.popupElem = this.elemRef.nativeElement.querySelector('.dp-popup');
        this.handleInnerElementClick(this.popupElem);
        if (this.pickerConfig.appendTo) {
            if (typeof this.pickerConfig.appendTo === 'string') {
                this.appendToElement = document.querySelector(this.pickerConfig.appendTo);
            }
            else {
                this.appendToElement = this.pickerConfig.appendTo;
            }
        }
        else {
            this.appendToElement = this.elemRef.nativeElement;
        }
        this.appendToElement.appendChild(this.calendarWrapper);
    };
    DpDayPickerComponent.prototype.handleInnerElementClick = function (element) {
        var _this = this;
        this.handleInnerElementClickUnlisteners.push(this.renderer.listen(element, 'click', function () {
            _this.hideStateHelper = true;
        }));
    };
    DpDayPickerComponent.prototype.writeValue = function (value) {
        if (value) {
            this.pickerConfig.userValueType =
                this.pickerConfig.userValueType || (typeof value === 'string' ? 'string' : 'object');
            this.userValue = value;
            this.init();
        }
    };
    DpDayPickerComponent.prototype.processOnChangeCallback = function (value) {
        if (!value || value.length === 0) {
            return null;
        }
        if (value.length > 0 && !this.pickerConfig.allowMultiSelect) {
            return this.pickerConfig.userValueType === 'string' ? this.viewValue : value[0];
        }
        return this.pickerConfig.userValueType === 'string' ? this.viewValue.split(', ') : value;
    };
    DpDayPickerComponent.prototype.onChangeCallback = function (_) {
    };
    ;
    DpDayPickerComponent.prototype.registerOnChange = function (fn) {
        this.onChangeCallback = fn;
    };
    DpDayPickerComponent.prototype.registerOnTouched = function (fn) {
    };
    DpDayPickerComponent.prototype.validate = function (c) {
        if (this.minDate || this.maxDate) {
            return this.validateFn(c);
        }
        else {
            return function () { return null; };
        }
    };
    DpDayPickerComponent.prototype.isDateValid = function (value) {
        if (this.dayPickerService.isDateValid(value, this.pickerConfig.format)) {
            this.value = this.value.concat(moment(value, this.pickerConfig.format));
        }
    };
    DpDayPickerComponent.prototype.init = function () {
        var _this = this;
        this.pickerConfig = this.dayPickerService.getConfig(this.userConfig);
        if (this.userValue) {
            if (Array.isArray(this.userValue)) {
                if (this.userConfig.allowMultiSelect === undefined) {
                    // set allowMultiSelect to true unless explicitly set by user
                    this.pickerConfig.allowMultiSelect = true;
                }
                if (this.pickerConfig.allowMultiSelect) {
                    this.value = this.userValue.map(function (val) { return utils_service_1.UtilsService.convertToMoment(val, _this.pickerConfig.format); });
                }
                else {
                    this.value = [utils_service_1.UtilsService.convertToMoment(this.userValue[0], this.pickerConfig.format)];
                }
            }
            else if (typeof this.userValue === 'string') {
                if (this.userConfig.userValueType === undefined) {
                    // set userValueType to 'string' unless explicitly set by user
                    this.pickerConfig.userValueType = 'string';
                }
                if (this.userValue.includes(',') && this.userConfig.allowMultiSelect === undefined) {
                    // set allowMultiSelect to true unless explicitly set by user
                    this.pickerConfig.allowMultiSelect = true;
                }
                if (this.pickerConfig.allowMultiSelect) {
                    this.value = this.userValue.split(',')
                        .map(function (val) { return utils_service_1.UtilsService.convertToMoment(val.trim(), _this.pickerConfig.format); });
                }
                else {
                    this.value = [utils_service_1.UtilsService.convertToMoment(this.userValue, this.pickerConfig.format)];
                }
            }
            else {
                this.value = [utils_service_1.UtilsService.convertToMoment(this.userValue, this.pickerConfig.format)];
            }
        }
        this.initApi();
    };
    DpDayPickerComponent.prototype.initValidators = function () {
        this.validateFn = this.dayPickerService.createValidator({
            minDate: typeof this.minDate === 'string' ?
                moment(this.minDate, this.pickerConfig.format) : this.minDate,
            maxDate: typeof this.maxDate === 'string' ?
                moment(this.maxDate, this.pickerConfig.format) : this.maxDate
        }, this.pickerConfig.format);
        this.onChangeCallback(this.processOnChangeCallback(this.value));
    };
    DpDayPickerComponent.prototype.initApi = function () {
        this.api = {
            open: this.showCalendars.bind(this),
            close: this.hideCalendar.bind(this)
        };
    };
    DpDayPickerComponent.prototype.daySelected = function () {
        if (this.pickerConfig.closeOnSelect && !this.pickerConfig.allowMultiSelect) {
            setTimeout(this.hideCalendar.bind(this), this.pickerConfig.closeOnSelectDelay);
        }
    };
    DpDayPickerComponent.prototype.inputFocused = function () {
        this.hideStateHelper = false;
        this.areCalendarsShown = true;
    };
    DpDayPickerComponent.prototype.showCalendars = function () {
        this.hideStateHelper = true;
        this.areCalendarsShown = true;
    };
    DpDayPickerComponent.prototype.hideCalendar = function () {
        this.areCalendarsShown = false;
    };
    DpDayPickerComponent.prototype.onViewDateChange = function (dates) {
        var _this = this;
        var dateStrings = dates.split(',').map(function (date) { return date.trim(); });
        var validDateStrings = dateStrings.filter(function (date) { return _this.dayPickerService.isDateValid(date, _this.pickerConfig.format); });
        if (!this.pickerConfig.allowMultiSelect && validDateStrings.length > 0) {
            // Single selection
            this.value = validDateStrings[0] !== '' ? [moment(validDateStrings[0], this.pickerConfig.format)] : [];
        }
        else if (validDateStrings.length === dateStrings.length && this.pickerConfig.allowMultiSelect) {
            // Multi selection
            this.value = validDateStrings
                .map(function (date) { return date !== '' ? moment(date, _this.pickerConfig.format) : null; })
                .filter(function (date) { return date !== null; });
        }
    };
    DpDayPickerComponent.prototype.onKeydown = function (e) {
        if (e.keyCode === 13) {
            this.areCalendarsShown = !this.areCalendarsShown;
            e.preventDefault();
        }
        if (e.keyCode === 27) {
            this.areCalendarsShown = false;
            e.preventDefault();
        }
        if (this.pickerConfig.disableKeypress) {
            e.preventDefault();
        }
    };
    DpDayPickerComponent.prototype.ngOnDestroy = function () {
        this.handleInnerElementClickUnlisteners.forEach(function (ul) { return ul(); });
        this.appendToElement.removeChild(this.calendarWrapper);
    };
    __decorate([
        core_1.Input('config'), 
        __metadata('design:type', Object)
    ], DpDayPickerComponent.prototype, "userConfig", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', String)
    ], DpDayPickerComponent.prototype, "placeholder", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Boolean)
    ], DpDayPickerComponent.prototype, "disabled", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object)
    ], DpDayPickerComponent.prototype, "minDate", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object)
    ], DpDayPickerComponent.prototype, "maxDate", void 0);
    __decorate([
        core_1.ViewChild('container'), 
        __metadata('design:type', core_1.ElementRef)
    ], DpDayPickerComponent.prototype, "calendarContainer", void 0);
    __decorate([
        core_1.HostListener('click'), 
        __metadata('design:type', Function), 
        __metadata('design:paramtypes', []), 
        __metadata('design:returntype', void 0)
    ], DpDayPickerComponent.prototype, "onClick", null);
    __decorate([
        core_1.HostListener('document:click'), 
        __metadata('design:type', Function), 
        __metadata('design:paramtypes', []), 
        __metadata('design:returntype', void 0)
    ], DpDayPickerComponent.prototype, "onBodyClick", null);
    __decorate([
        core_1.HostListener('document:scroll'),
        core_1.HostListener('window:resize'), 
        __metadata('design:type', Function), 
        __metadata('design:paramtypes', []), 
        __metadata('design:returntype', void 0)
    ], DpDayPickerComponent.prototype, "onScroll", null);
    DpDayPickerComponent = __decorate([
        core_1.Component({
            selector: 'dp-day-picker',
            template: "\n    <div>\n      <input type=\"text\"\n             class=\"dp-daypicker-input\"\n             [placeholder]=\"placeholder\"\n             [ngModel]=\"viewValue\"\n             (ngModelChange)=\"onViewDateChange($event)\"\n             (focus)=\"inputFocused()\"\n             (keydown)=\"onKeydown($event)\"\n             [disabled]=\"disabled\"/>\n      <div #container>\n        <div class=\"dp-popup\" [hidden]=\"!_areCalendarsShown\">\n          <dp-calendar class=\"dp-material\"\n                       [(selected)]=\"value\"\n                       [config]=\"pickerConfig\"\n                       (dayClick)=\"daySelected($event)\">\n          </dp-calendar>\n        </div>\n      </div>\n    </div>\n  ",
            styles: ["\n    :host {\n      display: inline-block;\n    }\n    .dp-popup {\n      position: relative;\n      background: #FFFFFF;\n      box-shadow: 1px 1px 5px 0 rgba(0, 0, 0, 0.1);\n      border-left: 1px solid rgba(0, 0, 0, 0.1);\n      border-right: 1px solid rgba(0, 0, 0, 0.1);\n      border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n      z-index: 9999;\n      white-space: nowrap;\n    }\n    :host(.dp-material) .dp-calendar-container {\n      background: white;\n    }\n    :host(.dp-material) .dp-calendar-container:not(:first-of-type) {\n      border-left: 1px solid #B0AFAF;\n    }\n    :host(.dp-material) .dp-calendar-nav-container {\n      height: 30px;\n      border: none;\n    }\n    :host(.dp-material) .dp-calendar-nav-left,\n    :host(.dp-material) .dp-calendar-nav-right {\n      border: none;\n      background: white;\n      outline: none;\n      font-size: 16px;\n    }\n    :host(.dp-material) .dp-daypicker-input {\n      box-sizing: border-box;\n      height: 30px;\n      width: 212px;\n      font-size: 13px;\n      outline: none;\n    }\n    :host(.dp-material) >>> dp-calendar-month .dp-calendar-weekday {\n      height: 25px;\n      width: 30px;\n      line-height: 25px;\n      background: #E0E0E0;\n      border: none;\n    }\n    :host(.dp-material) >>> dp-calendar-month .dp-calendar-wrapper {\n      border: none;\n    }\n    :host(.dp-material) >>> dp-calendar-month .dp-calendar-day {\n      box-sizing: border-box;\n      height: 30px;\n      width: 30px;\n      background: white;\n      border-radius: 50%;\n      border: none;\n      outline: none;\n    }\n    :host(.dp-material) >>> dp-calendar-month .dp-calendar-day:hover {\n      background: #E0E0E0;\n    }\n    :host(.dp-material) >>> dp-calendar-month .dp-selected {\n      background: #106CC8;\n      color: white;\n    }\n    :host(.dp-material) >>> dp-calendar-month .dp-selected:hover {\n      background: #106CC8;\n    }\n    :host(.dp-material) >>> dp-calendar-month .dp-current-day {\n      border: 1px solid #106CC8;\n    }\n  "],
            entryComponents: [dp_calendar_component_1.DpCalendarComponent],
            providers: [
                dom_appender_service_1.DomHelper,
                calendar_service_1.CalendarService,
                day_picker_service_1.DayPickerService,
                {
                    provide: forms_1.NG_VALUE_ACCESSOR,
                    useExisting: core_1.forwardRef(function () { return DpDayPickerComponent; }),
                    multi: true
                },
                {
                    provide: forms_1.NG_VALIDATORS,
                    useExisting: core_1.forwardRef(function () { return DpDayPickerComponent; }),
                    multi: true
                }
            ]
        }), 
        __metadata('design:paramtypes', [day_picker_service_1.DayPickerService, dom_appender_service_1.DomHelper, core_1.ElementRef, core_1.Renderer])
    ], DpDayPickerComponent);
    return DpDayPickerComponent;
}());
exports.DpDayPickerComponent = DpDayPickerComponent;

//# sourceMappingURL=dp-day-picker.component.js.map
