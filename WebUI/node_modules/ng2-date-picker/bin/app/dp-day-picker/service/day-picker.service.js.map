{"version":3,"sources":["../src/app/dp-day-picker/service/day-picker.service.ts"],"names":[],"mappings":"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","file":"app/dp-day-picker/service/day-picker.service.js","sourcesContent":["import {CalendarService} from './../../dp-calendar/config/calendar.service';\nimport {Injectable} from '@angular/core';\nimport {IDayPickerConfig} from './day-picker-config.model';\nimport * as moment from 'moment';\nimport {Moment} from 'moment';\nimport {UtilsService} from '../../common/services/utils/utils.service';\nimport {FormControl} from '@angular/forms';\nimport {ICalendarConfig} from '../../dp-calendar/config/calendar-config.model';\n\n@Injectable()\nexport class DayPickerService {\n  private defaultConfig: IDayPickerConfig = {\n    closeOnSelect: true,\n    closeOnSelectDelay: 100,\n    disableKeypress: false,\n    drops: 'down',\n    opens: 'right'\n  };\n\n  constructor(private calendarContainerService: CalendarService) {\n  }\n\n  getConfig(config: IDayPickerConfig): ICalendarConfig {\n    const _config = Object.assign({}, this.defaultConfig, config);\n\n    if (config && config.allowMultiSelect && config.closeOnSelect === undefined) {\n      _config.closeOnSelect = false;\n    }\n\n    return this.calendarContainerService.getConfig(_config);\n  }\n\n  isDateValid(date: string, format: string): boolean {\n    if (date === '') {\n      return true;\n    }\n\n    return moment(date, format, true).isValid();\n  }\n\n  createValidator({minDate, maxDate}, dateFormat: string) {\n    let isValid: boolean;\n    let value: Moment[];\n    const validators = [];\n\n    if (minDate) {\n      validators.push({\n        key: 'minDate',\n        isValid: () => {\n          const _isValid = value.every(val => val.isSameOrAfter(minDate, 'day'));\n          isValid = isValid ? _isValid : false;\n          return _isValid;\n        }\n      });\n    }\n\n    if (maxDate) {\n      validators.push({\n        key: 'maxDate',\n        isValid: () => {\n          const _isValid = value.every(val => val.isSameOrBefore(maxDate, 'day'));\n          isValid = isValid ? _isValid : false;\n          return _isValid;\n        }\n      });\n    }\n\n    return function validateInput(c: FormControl) {\n      isValid = true;\n\n      if (c.value) {\n        if (typeof c.value === 'string') {\n          const dateStrings = c.value.split(',').map(date => date.trim());\n          const validDateStrings = dateStrings.filter(date => this.dayPickerService.isDateValid(date, this.pickerConfig.format));\n          value = validDateStrings.map(dateString => moment(dateString, dateFormat));\n        } else if (!Array.isArray(c.value)) {\n          value = [c.value];\n        } else {\n          value = c.value.map(val => UtilsService.convertToMoment(val, dateFormat));\n        }\n      } else {\n        return null;\n      }\n\n      if (!value.every(val => val.isValid())) {\n        return {\n          format: {\n            given: c.value\n          }\n        };\n      }\n\n      const errors = validators.reduce((map, err) => {\n        if (!err.isValid()) {\n          map[err.key] = {\n            given: value\n          };\n        }\n\n        return map;\n      }, {});\n\n      return !isValid ? errors : null;\n    };\n  }\n}\n"],"sourceRoot":"/source/"}