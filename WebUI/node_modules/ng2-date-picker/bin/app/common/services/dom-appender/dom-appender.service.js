"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require('@angular/core');
var DomHelper = (function () {
    function DomHelper() {
    }
    DomHelper.setYAxisPosition = function (element, anchor, drops) {
        var _a = anchor.getBoundingClientRect(), top = _a.top, bottom = _a.bottom;
        if (drops === 'down') {
            element.style.top = bottom + document.body.scrollTop + 'px';
        }
        else {
            element.style.top = (top + document.body.scrollTop - element.scrollHeight) + 'px';
        }
    };
    DomHelper.setXAxisPosition = function (element, anchor, dimElem, opens) {
        var _a = anchor.getBoundingClientRect(), left = _a.left, right = _a.right;
        if (opens === 'right') {
            element.style.left = left + 'px';
        }
        else {
            element.style.left = left - dimElem.offsetWidth + anchor.offsetWidth + 'px';
        }
    };
    DomHelper.isTopInView = function (el) {
        var top = el.getBoundingClientRect().top;
        return (top >= 0);
    };
    DomHelper.isBottomInView = function (el) {
        var bottom = el.getBoundingClientRect().bottom;
        return (bottom <= window.innerHeight);
    };
    DomHelper.isLeftInView = function (el) {
        var left = el.getBoundingClientRect().left;
        return (left >= 0);
    };
    DomHelper.isRightInView = function (el) {
        var right = el.getBoundingClientRect().right;
        return (right <= window.innerWidth);
    };
    DomHelper.prototype.appendElementToPosition = function (config) {
        var _this = this;
        var container = config.container, element = config.element;
        if (container.style.position === 'static') {
            container.style.position = 'relative';
        }
        if (element.style.position !== 'absolute') {
            element.style.position = 'absolute';
        }
        element.style.visibility = 'hidden';
        setTimeout(function () {
            _this.setElementPosition(config);
            element.style.visibility = 'visible';
        });
    };
    DomHelper.prototype.setElementPosition = function (_a) {
        var element = _a.element, anchor = _a.anchor, dimElem = _a.dimElem, drops = _a.drops, opens = _a.opens;
        DomHelper.setYAxisPosition(element, anchor, drops);
        DomHelper.setXAxisPosition(element, anchor, dimElem, opens);
        if (drops === 'down' && !DomHelper.isBottomInView(dimElem)) {
            DomHelper.setYAxisPosition(element, anchor, 'up');
        }
        if (drops === 'up' && !DomHelper.isTopInView(dimElem)) {
            DomHelper.setYAxisPosition(element, anchor, 'down');
        }
        if (opens === 'right' && !DomHelper.isRightInView(dimElem)) {
            DomHelper.setXAxisPosition(element, anchor, dimElem, 'left');
        }
        if (opens === 'left' && !DomHelper.isLeftInView(dimElem)) {
            DomHelper.setXAxisPosition(element, anchor, dimElem, 'right');
        }
    };
    DomHelper = __decorate([
        core_1.Injectable(), 
        __metadata('design:paramtypes', [])
    ], DomHelper);
    return DomHelper;
}());
exports.DomHelper = DomHelper;

//# sourceMappingURL=dom-appender.service.js.map
